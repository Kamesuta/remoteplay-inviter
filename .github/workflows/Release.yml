name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v*

jobs:
  build:
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              os: ubuntu-latest,
              target: x86_64-unknown-linux-gnu,
              use-cross: false,
              extension: '.AppImage',
              suffix: '',
            }
          - {
              os: macos-latest,
              target: x86_64-apple-darwin,
              use-cross: false,
              extension: '',
              suffix: '-intel',
            }
          - {
              os: macos-latest,
              target: aarch64-apple-darwin,
              use-cross: false,
              extension: '',
              suffix: '',
            }
          - {
              os: windows-latest,
              target: x86_64-pc-windows-msvc,
              use-cross: false,
              extension: .exe,
              suffix: '',
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-07-27
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - name: Install OpenSSL
        shell: bash
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libxcb-xfixes0-dev cmake clang build-essential

      - name: setup environments
        run: |
          echo "ENDPOINT_URL=${{ secrets.ENDPOINT_URL }}" > .env
          cat .env

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --release --target ${{ matrix.job.target }}

      - name: Build AppImage
        uses: AppImageCrafters/build-appimage-action@master
        if: runner.os == 'Linux'
        env:
          EXECUTABLE_PATH: target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}
          UPDATE_INFO: gh-releases-zsync|Kamesuta|remoteplay-inviter|latest|*x86_64.AppImage.zsync
        with:
          recipe: AppImageBuilder.yml

      - name: Rename artifacts
        shell: bash
        if: runner.os != 'Linux'
        run: |
          mv target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }} ${{ env.PROJECT_NAME }}${{ matrix.job.suffix }}${{ matrix.job.extension }}

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.PROJECT_NAME }}${{ matrix.job.suffix }}${{ matrix.job.extension }}
